{
  "nbformat": 4,
  "nbformat_minor": 0,
  "metadata": {
    "colab": {
      "provenance": []
    },
    "kernelspec": {
      "name": "python3",
      "display_name": "Python 3"
    },
    "language_info": {
      "name": "python"
    }
  },
  "cells": [
    {
      "cell_type": "code",
      "source": [
        "import gradio as gr\n",
        "import numpy as np\n",
        "import pandas as pd\n",
        "from sklearn.linear_model import LinearRegression\n",
        "from sklearn.model_selection import train_test_split\n",
        "from sklearn.metrics import mean_squared_error, r2_score\n",
        "import matplotlib.pyplot as plt\n",
        "\n",
        "# 1. Generate some synthetic data for supervised learning (Linear Regression example)\n",
        "np.random.seed(42)\n",
        "X = 2 * np.random.rand(100, 1) # Feature\n",
        "y = 4 + 3 * X + np.random.randn(100, 1) # Target variable with some noise\n",
        "\n",
        "# Split data into training and testing sets\n",
        "X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)\n",
        "\n",
        "# 2. Train a Supervised Learning Model (Linear Regression)\n",
        "model = LinearRegression()\n",
        "model.fit(X_train, y_train)\n",
        "\n",
        "# Evaluate the model (optional, but good practice)\n",
        "y_pred = model.predict(X_test)\n",
        "mse = mean_squared_error(y_test, y_pred)\n",
        "r2 = r2_score(y_test, y_pred)\n",
        "\n",
        "print(f\"Mean Squared Error: {mse:.2f}\")\n",
        "print(f\"R-squared: {r2:.2f}\")\n",
        "\n",
        "# 3. Define the prediction function for Gradio\n",
        "def predict_income(input_feature):\n",
        "    \"\"\"\n",
        "    Predicts the target variable based on the input feature using the trained model.\n",
        "    \"\"\"\n",
        "    # Reshape the input_feature to be a 2D array, as expected by scikit-learn's predict\n",
        "    input_feature_reshaped = np.array([[input_feature]])\n",
        "    prediction = model.predict(input_feature_reshaped)[0][0] # Get the scalar value\n",
        "    return f\"Predicted Target: {prediction:.2f}\"\n",
        "\n",
        "# 4. Create a function to generate a plot of the data and regression line\n",
        "def plot_data_and_prediction():\n",
        "    plt.figure(figsize=(8, 6))\n",
        "    plt.scatter(X, y, label='Actual Data', alpha=0.6)\n",
        "    plt.plot(X, model.predict(X), color='red', label='Regression Line')\n",
        "    plt.xlabel(\"Feature (X)\")\n",
        "    plt.ylabel(\"Target (y)\")\n",
        "    plt.title(\"Linear Regression: Data and Model Prediction\")\n",
        "    plt.legend()\n",
        "    plt.grid(True)\n",
        "    return plt # Return the matplotlib plot object\n",
        "\n",
        "# 5. Build the Gradio Interface\n",
        "iface = gr.Interface(\n",
        "    fn=predict_income,\n",
        "    inputs=gr.Number(label=\"Input Feature (e.g., hours studied, years of experience)\"),\n",
        "    outputs=\"text\",\n",
        "    title=\"Simple Supervised Learning Predictor (Linear Regression)\",\n",
        "    description=\"Enter a numerical input and get a prediction from a trained linear regression model. Also see the data distribution and regression line below.\",\n",
        "    live=True, # Update predictions live as you type\n",
        "    allow_flagging='never' # Disable flagging for this example\n",
        ")\n",
        "\n",
        "# You can add the plot as another Gradio component or as a separate interface\n",
        "# For simplicity, let's include the plot as a separate tab or just display it on run.\n",
        "# A common way to display plots within Gradio is to return a matplotlib figure object.\n",
        "\n",
        "# If you want to show the plot within the same interface, you can modify `predict_income`\n",
        "# to also return a plot, or create a separate interface for visualization.\n",
        "# For now, let's keep prediction and plotting separate for clarity, and explain how to run both.\n",
        "\n",
        "# To display the plot within Gradio, you would typically use gr.Plot\n",
        "# Let's create a combined interface:\n",
        "with gr.Blocks() as demo:\n",
        "    gr.Markdown(\"# Simple Supervised Learning Predictor\")\n",
        "    gr.Markdown(\"Enter a numerical input and get a prediction from a trained linear regression model.\")\n",
        "\n",
        "    with gr.Row():\n",
        "        with gr.Column():\n",
        "            input_num = gr.Number(label=\"Input Feature (e.g., hours studied, years of experience)\")\n",
        "            output_text = gr.Text(label=\"Prediction\")\n",
        "            predict_button = gr.Button(\"Get Prediction\")\n",
        "\n",
        "            predict_button.click(fn=predict_income, inputs=input_num, outputs=output_text)\n",
        "\n",
        "        with gr.Column():\n",
        "            gr.Markdown(\"### Data and Regression Line Visualization\")\n",
        "            plot_output = gr.Plot()\n",
        "\n",
        "    # Call the plot function to update the plot_output when the interface is launched\n",
        "    demo.load(plot_data_and_prediction, outputs=plot_output)\n",
        "\n",
        "\n",
        "# To run the Gradio app:\n",
        "# Make sure you have gradio installed: pip install gradio scikit-learn matplotlib pandas\n",
        "# Save this code as a .py file (e.g., supervised_gradio.py)\n",
        "# Run from your terminal: python supervised_gradio.py\n",
        "demo.launch()"
      ],
      "metadata": {
        "id": "cqPqWlObFVrD"
      },
      "execution_count": null,
      "outputs": []
    }
  ]
}